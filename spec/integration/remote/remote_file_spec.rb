# frozen_string_literal: true

RSpec.describe Kanrisuru::Remote::File do
  module Kanrisuru
    module Remote
      Class.new(File) do
        READ_FILE_SIZE = 25_000
      end
    end
  end

  TestHosts.each_os do |os_name|
    context "with #{os_name}" do
      before(:all) do
        host_json = TestHosts.host(os_name)
        host = Kanrisuru::Remote::Host.new(
          host: host_json['hostname'],
          username: host_json['username'],
          keys: [host_json['ssh_key']]
        )

        host.mkdir("#{host_json['home']}/.kanrisuru_spec_files", silent: true)
        host.disconnect
      end

      let(:host_json) { TestHosts.host(os_name) }
      let(:host) do
        Kanrisuru::Remote::Host.new(
          host: host_json['hostname'],
          username: host_json['username'],
          keys: [host_json['ssh_key']]
        )
      end

      let(:spec_dir) { "#{host_json['home']}/.kanrisuru_spec_files" }

      after do
        host.disconnect
      end

      after(:all) do
        host_json = TestHosts.host(os_name)
        host = Kanrisuru::Remote::Host.new(
          host: host_json['hostname'],
          username: host_json['username'],
          keys: [host_json['ssh_key']]
        )

        host.rmdir("#{host_json['home']}/.kanrisuru_spec_files")
        host.rmdir("#{host_json['home']}/extract-tar-files") if host.dir?("#{host_json['home']}/extract-tar-files")
        host.disconnect
      end

      it 'loads a remote file to edit' do
        file = host.file("#{spec_dir}/remote-file.txt")

        expect(file).to be_instance_of(described_class)
        expect(file.exists?).to eq(false)
        expect(file.expand_path).to eq('')

        file.touch

        expect(file.exists?).to eq(true)
        expect(file.zero?).to eq(true)
        expect(file.user).to eq(host_json['username'])

        case os_name
        when 'opensuse', 'sles'
          expect(file.group).to eq('users')
        else
          expect(file.group).to eq(host_json['username'])
        end

        expect(file.expand_path).to eq("#{spec_dir}/remote-file.txt")

        file.append do |f|
          f << 'Hello world'
          f << 'this is a test!'
        end

        lines = file.map { |line| line }
        expect(lines).to eq(['Hello world', 'this is a test!'])
        expect(file.zero?).to eq(false)

        file.prepend do |f|
          f << 'Lines exist'
          f << 'at the beginning...'
        end

        expect(file[0]).to eq('Lines exist')
        expect(file[3]).to eq('this is a test!')

        lines = file.map { |line| line }
        expect(lines).to eq(['Lines exist', 'at the beginning...', 'Hello world', 'this is a test!'])

        expect(file.delete).to eq(true)
        expect(file.exists?).to eq(false)
      end

      it 'finds and updates file' do
        file = host.file("#{spec_dir}/hosts.conf.test")

        file.touch

        file.write do |f|
          f << '127.0.0.1 localhost'
          f << '127.0.1.1 ubuntu'
          f << ''
          f << '# The following lines are desirable for IPv6 capable hosts'
          f << '::1 ip6-localhost ip6-loopback'
          f << 'fe00::0 ip6-localnet'
          f << 'ff00::0 ip6-mcastprefix'
          f << 'ff02::1 ip6-allnodes'
          f << 'ff02::2 ip6-allrouters'
          f << 'ff02::3 ip6-allhosts'
        end

        expect(file[2]).to eq('')
        file.find_and_append(/^127.0.1.1 ubuntu/, '8.8.8.8 rickroll.com')
        expect(file[2]).to eq('8.8.8.8 rickroll.com')

        expect(file[1]).to eq('127.0.1.1 ubuntu')
        file.find_and_prepend(/^127.0.1.1 ubuntu/, '1.1.1.1 nevergoingtoletyoudown.io')
        expect(file[1]).to eq('1.1.1.1 nevergoingtoletyoudown.io')

        file.prepend do |f|
          f << '# Generated by Kanrisuru'
        end

        file.find_and_replace_line(/#/, '# Rick Astley was here')
        expect(file[0]).to eq('# Rick Astley was here')
        expect(file[6]).to eq('# Rick Astley was here')

        file.find_and_replace_value(/\slocalhost/, ' nevergoingtogiveyouup.biz')
        expect(file[1]).to eq('127.0.0.1 nevergoingtogiveyouup.biz')

        file.find_and_remove(/^::/)
        file.find_and_remove(/^ff/)
        file.find_and_remove(/^fe/)

        expect(file.lines).to eq(7)
      end

      it 'iterates with chunking' do
        file = host.file("#{spec_dir}/remote-file-large.txt")

        expect(file.exists?).to eq(false)

        file.touch

        file.write do |f|
          (0...50_000).each do |i|
            f << "Line: #{i}"
          end
        end

        line = file.find do |f|
          f == 'Line: 1111'
        end

        expect(line).to eq('Line: 1111')

        expect(file[0]).to eq('Line: 0')
        expect(file[5]).to eq('Line: 5')
        expect(file[28_445]).to eq('Line: 28445')
        expect(file[49_999]).to eq('Line: 49999')
        expect { file[50_000] }.to raise_error(ArgumentError)

        file.prepend do |f|
          f << 'Hello large file'
        end

        expect(file[0]).to eq('Hello large file')
        expect(file[1]).to eq('Line: 0')
        expect(file[28_446]).to eq('Line: 28445')
        expect(file[50_000]).to eq('Line: 49999')
      end
    end
  end
end
