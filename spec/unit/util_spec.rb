# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Kanrisuru::Util do
  it 'gets present value' do
    expect(described_class.present?(1)).to eq(true)
    expect(described_class.present?(true)).to eq(true)
    expect(described_class.present?('a')).to eq(true)
    expect(described_class.present?(Class)).to eq(true)

    expect(described_class.present?(false)).to eq(false)
    expect(described_class.present?('')).to eq(false)
    expect(described_class.present?([])).to eq(false)
    expect(described_class.present?(nil)).to eq(false)
  end

  it 'joins strings into array' do
    expect(described_class.array_join_string(%w[opt1 opt2 opt3])).to eq('opt1,opt2,opt3')
    expect(described_class.array_join_string(%w[opt1 opt2 opt3], ' | ')).to eq('opt1 | opt2 | opt3')
    expect(described_class.array_join_string('opt1, opt2, opt3')).to eq('opt1, opt2, opt3')
  end

  it 'still joins string with depecrated method' do
    allow(Kanrisuru.logger).to receive(:info)
    expect(Kanrisuru.logger).to receive(:info) do |&block|
      expect(block.call).to eq('DEPRECATION WARNING: string_join_array will be removed in the upcoming major release. Use array_join_string instead.')
    end

    expect(described_class.string_join_array('a')).to eq('a')
    expect(described_class.string_join_array(%w[a b c])).to eq('a,b,c')
  end

  it 'camelizes strings' do
    expect(described_class.camelize('hello_world')).to eq('HelloWorld')
    expect(described_class.camelize('helloworld')).to eq('Helloworld')
    expect(described_class.camelize('HelloWorld')).to eq('HelloWorld')
  end

  it 'gets os family' do
    expect(Kanrisuru::Util::OsFamily['debian']).to match({
                                                           name: 'Debian',
                                                           os_family: 'linux',
                                                           upstream: 'linux',
                                                           model: 'open_source',
                                                           state: 'current',
                                                           type: 'distribution'
                                                         })
  end

  it 'detects family inclusion of distribution' do
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('linux', 'centos')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix_like', 'centos')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix', 'centos')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix_like', 'linux')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('linux', 'ubuntu')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('linux', 'debian')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('linux', 'linux_mint')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix', 'bsd')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix_like', 'open_bsd')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix_like', 'darwin')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('unix_like', 'pure_darwin')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('linux', 'redhat')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.family_include_distribution?('fedora', 'redhat')).to eq(false)
  end

  it 'detects upstream inclusion of distribution' do
    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('debian', 'ubuntu')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('debian', 'linux_mint')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('linux', 'linux_mint')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('fedora', 'redhat')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('sles', 'opensuse_leap')).to eq(true)
    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('fedora', 'centos')).to eq(true)

    expect(Kanrisuru::Util::OsFamily.upstream_include_distribution?('unix_like', 'linux_mint')).to eq(false)
  end

  it 'converts from methods' do
    expect(Kanrisuru::Util::Bits.convert_from_kb(1_000, :mb)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_from_mb(1_000, :gb)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_from_gb(1_000, :tb)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_from_tb(1_000, :pb)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_from_pb(1_000, :pb)).to eq(1_000)
  end

  it 'converts bytes and bits' do
    expect(Kanrisuru::Util::Bits.convert_bytes(1_000, :kilobyte, :kilobyte)).to eq(1000)
    expect(Kanrisuru::Util::Bits.convert_bytes(1_000, :kilobyte, :kb)).to eq(1000)
    expect(Kanrisuru::Util::Bits.convert_bytes(100, :kilobit, :kilobit)).to eq(100)
    expect(Kanrisuru::Util::Bits.convert_bytes(800, :kilobit, :kilobyte)).to eq(100)
    expect(Kanrisuru::Util::Bits.convert_bytes(100, :kilobyte, :kilobit)).to eq(800)

    expect { Kanrisuru::Util::Bits.convert_bytes(100, :kilobyte, :kilobitt) }.to raise_error(ArgumentError)
    expect { Kanrisuru::Util::Bits.convert_bytes(100, :kilobytee, :kilobit) }.to raise_error(ArgumentError)
  end

  it 'gets invalid signal type' do
    expect { Kanrisuru::Util::Signal[{ 'Hello' => 'World' }] }.to raise_error(ArgumentError)
  end

  it 'translates signal from string to numeric' do
    expect(Kanrisuru::Util::Signal['HUP']).to  eq(1)
    expect(Kanrisuru::Util::Signal['INT']).to  eq(2)
    expect(Kanrisuru::Util::Signal['QUIT']).to eq(3)
    expect(Kanrisuru::Util::Signal['ILL']).to  eq(4)
    expect(Kanrisuru::Util::Signal['TRAP']).to eq(5)
    expect(Kanrisuru::Util::Signal['ABRT']).to eq(6)
    expect(Kanrisuru::Util::Signal['BUS']).to eq(7)
    expect(Kanrisuru::Util::Signal['FPE']).to eq(8)
    expect(Kanrisuru::Util::Signal['KILL']).to eq(9)
    expect(Kanrisuru::Util::Signal['USR1']).to eq(10)
    expect(Kanrisuru::Util::Signal['SEGV']).to eq(11)
    expect(Kanrisuru::Util::Signal['USR2']).to eq(12)
    expect(Kanrisuru::Util::Signal['PIPE']).to eq(13)
    expect(Kanrisuru::Util::Signal['ALRM']).to eq(14)
    expect(Kanrisuru::Util::Signal['TERM']).to eq(15)
    expect(Kanrisuru::Util::Signal['STKFLT']).to eq(16)
    expect(Kanrisuru::Util::Signal['CHLD']).to eq(17)
    expect(Kanrisuru::Util::Signal['CONT']).to eq(18)
    expect(Kanrisuru::Util::Signal['STOP']).to eq(19)
    expect(Kanrisuru::Util::Signal['TSTP']).to eq(20)
    expect(Kanrisuru::Util::Signal['TTIN']).to eq(21)
    expect(Kanrisuru::Util::Signal['TTOU']).to eq(22)
    expect(Kanrisuru::Util::Signal['URG']).to eq(23)
    expect(Kanrisuru::Util::Signal['XCPU']).to eq(24)
    expect(Kanrisuru::Util::Signal['XFSZ']).to eq(25)
    expect(Kanrisuru::Util::Signal['VTALRM']).to eq(26)
    expect(Kanrisuru::Util::Signal['PROF']).to eq(27)
    expect(Kanrisuru::Util::Signal['WINCH']).to eq(28)
    expect(Kanrisuru::Util::Signal['IO']).to eq(29)
    expect(Kanrisuru::Util::Signal['PWR']).to eq(30)
    expect(Kanrisuru::Util::Signal['SYS']).to eq(31)
    expect(Kanrisuru::Util::Signal['RTMIN']).to eq(34)
    expect(Kanrisuru::Util::Signal['RTMIN+1']).to eq(35)
    expect(Kanrisuru::Util::Signal['RTMIN+2']).to eq(36)
    expect(Kanrisuru::Util::Signal['RTMIN+3']).to eq(37)
    expect(Kanrisuru::Util::Signal['RTMIN+4']).to eq(38)
    expect(Kanrisuru::Util::Signal['RTMIN+5']).to eq(39)
    expect(Kanrisuru::Util::Signal['RTMIN+6']).to eq(40)
    expect(Kanrisuru::Util::Signal['RTMIN+7']).to eq(41)
    expect(Kanrisuru::Util::Signal['RTMIN+8']).to eq(42)
    expect(Kanrisuru::Util::Signal['RTMIN+9']).to eq(43)
    expect(Kanrisuru::Util::Signal['RTMIN+10']).to eq(44)
    expect(Kanrisuru::Util::Signal['RTMIN+11']).to eq(45)
    expect(Kanrisuru::Util::Signal['RTMIN+12']).to eq(46)
    expect(Kanrisuru::Util::Signal['RTMIN+13']).to eq(47)
    expect(Kanrisuru::Util::Signal['RTMIN+14']).to eq(48)
    expect(Kanrisuru::Util::Signal['RTMIN+15']).to eq(49)
    expect(Kanrisuru::Util::Signal['RTMAX-14']).to eq(50)
    expect(Kanrisuru::Util::Signal['RTMAX-13']).to eq(51)
    expect(Kanrisuru::Util::Signal['RTMAX-12']).to eq(52)
    expect(Kanrisuru::Util::Signal['RTMAX-11']).to eq(53)
    expect(Kanrisuru::Util::Signal['RTMAX-10']).to eq(54)
    expect(Kanrisuru::Util::Signal['RTMAX-9']).to eq(55)
    expect(Kanrisuru::Util::Signal['RTMAX-8']).to eq(56)
    expect(Kanrisuru::Util::Signal['RTMAX-7']).to eq(57)
    expect(Kanrisuru::Util::Signal['RTMAX-6']).to eq(58)
    expect(Kanrisuru::Util::Signal['RTMAX-5']).to eq(59)
    expect(Kanrisuru::Util::Signal['RTMAX-4']).to eq(60)
    expect(Kanrisuru::Util::Signal['RTMAX-3']).to eq(61)
    expect(Kanrisuru::Util::Signal['RTMAX-2']).to eq(62)
    expect(Kanrisuru::Util::Signal['RTMAX-1']).to eq(63)
    expect(Kanrisuru::Util::Signal['RTMAX']).to eq(64)
  end

  it 'translates signal from numeric to string' do
    expect(Kanrisuru::Util::Signal[1]).to eq('HUP')
    expect(Kanrisuru::Util::Signal[2]).to eq('INT')
    expect(Kanrisuru::Util::Signal[3]).to eq('QUIT')
    expect(Kanrisuru::Util::Signal[4]).to eq('ILL')
    expect(Kanrisuru::Util::Signal[5]).to eq('TRAP')
    expect(Kanrisuru::Util::Signal[6]).to eq('ABRT')
    expect(Kanrisuru::Util::Signal[7]).to eq('BUS')
    expect(Kanrisuru::Util::Signal[8]).to eq('FPE')
    expect(Kanrisuru::Util::Signal[9]).to eq('KILL')
    expect(Kanrisuru::Util::Signal[10]).to eq('USR1')
    expect(Kanrisuru::Util::Signal[11]).to eq('SEGV')
    expect(Kanrisuru::Util::Signal[12]).to eq('USR2')
    expect(Kanrisuru::Util::Signal[13]).to eq('PIPE')
    expect(Kanrisuru::Util::Signal[14]).to eq('ALRM')
    expect(Kanrisuru::Util::Signal[15]).to eq('TERM')
    expect(Kanrisuru::Util::Signal[16]).to eq('STKFLT')
    expect(Kanrisuru::Util::Signal[17]).to eq('CHLD')
    expect(Kanrisuru::Util::Signal[18]).to eq('CONT')
    expect(Kanrisuru::Util::Signal[19]).to eq('STOP')
    expect(Kanrisuru::Util::Signal[20]).to eq('TSTP')
    expect(Kanrisuru::Util::Signal[21]).to eq('TTIN')
    expect(Kanrisuru::Util::Signal[22]).to eq('TTOU')
    expect(Kanrisuru::Util::Signal[23]).to eq('URG')
    expect(Kanrisuru::Util::Signal[24]).to eq('XCPU')
    expect(Kanrisuru::Util::Signal[25]).to eq('XFSZ')
    expect(Kanrisuru::Util::Signal[26]).to eq('VTALRM')
    expect(Kanrisuru::Util::Signal[27]).to eq('PROF')
    expect(Kanrisuru::Util::Signal[28]).to eq('WINCH')
    expect(Kanrisuru::Util::Signal[29]).to eq('IO')
    expect(Kanrisuru::Util::Signal[30]).to eq('PWR')
    expect(Kanrisuru::Util::Signal[31]).to eq('SYS')
    expect(Kanrisuru::Util::Signal[34]).to eq('RTMIN')
    expect(Kanrisuru::Util::Signal[35]).to eq('RTMIN+1')
    expect(Kanrisuru::Util::Signal[36]).to eq('RTMIN+2')
    expect(Kanrisuru::Util::Signal[37]).to eq('RTMIN+3')
    expect(Kanrisuru::Util::Signal[38]).to eq('RTMIN+4')
    expect(Kanrisuru::Util::Signal[39]).to eq('RTMIN+5')
    expect(Kanrisuru::Util::Signal[40]).to eq('RTMIN+6')
    expect(Kanrisuru::Util::Signal[41]).to eq('RTMIN+7')
    expect(Kanrisuru::Util::Signal[42]).to eq('RTMIN+8')
    expect(Kanrisuru::Util::Signal[43]).to eq('RTMIN+9')
    expect(Kanrisuru::Util::Signal[44]).to eq('RTMIN+10')
    expect(Kanrisuru::Util::Signal[45]).to eq('RTMIN+11')
    expect(Kanrisuru::Util::Signal[46]).to eq('RTMIN+12')
    expect(Kanrisuru::Util::Signal[47]).to eq('RTMIN+13')
    expect(Kanrisuru::Util::Signal[48]).to eq('RTMIN+14')
    expect(Kanrisuru::Util::Signal[49]).to eq('RTMIN+15')
    expect(Kanrisuru::Util::Signal[50]).to eq('RTMAX-14')
    expect(Kanrisuru::Util::Signal[51]).to eq('RTMAX-13')
    expect(Kanrisuru::Util::Signal[52]).to eq('RTMAX-12')
    expect(Kanrisuru::Util::Signal[53]).to eq('RTMAX-11')
    expect(Kanrisuru::Util::Signal[54]).to eq('RTMAX-10')
    expect(Kanrisuru::Util::Signal[55]).to eq('RTMAX-9')
    expect(Kanrisuru::Util::Signal[56]).to eq('RTMAX-8')
    expect(Kanrisuru::Util::Signal[57]).to eq('RTMAX-7')
    expect(Kanrisuru::Util::Signal[58]).to eq('RTMAX-6')
    expect(Kanrisuru::Util::Signal[59]).to eq('RTMAX-5')
    expect(Kanrisuru::Util::Signal[60]).to eq('RTMAX-4')
    expect(Kanrisuru::Util::Signal[61]).to eq('RTMAX-3')
    expect(Kanrisuru::Util::Signal[62]).to eq('RTMAX-2')
    expect(Kanrisuru::Util::Signal[63]).to eq('RTMAX-1')
    expect(Kanrisuru::Util::Signal[64]).to eq('RTMAX')
  end

  it 'gets invalid dmi type' do
    expect { Kanrisuru::Util::DmiType[{ 'Hello' => 'World' }] }.to raise_error(ArgumentError)
  end

  it 'translates dmi types from string to integer' do
    expect(Kanrisuru::Util::DmiType['BIOS']).to eq(0)
    expect(Kanrisuru::Util::DmiType['System']).to eq(1)
    expect(Kanrisuru::Util::DmiType['Baseboard']).to eq(2)
    expect(Kanrisuru::Util::DmiType['Chassis']).to eq(3)
    expect(Kanrisuru::Util::DmiType['Processor']).to eq(4)
    expect(Kanrisuru::Util::DmiType['Memory Controller']).to eq(5)
    expect(Kanrisuru::Util::DmiType['Memory Module']).to eq(6)
    expect(Kanrisuru::Util::DmiType['Cache']).to eq(7)
    expect(Kanrisuru::Util::DmiType['Port Connector']).to eq(8)
    expect(Kanrisuru::Util::DmiType['System Slots']).to eq(9)
    expect(Kanrisuru::Util::DmiType['On Board Devices']).to eq(10)
    expect(Kanrisuru::Util::DmiType['OEM Strings']).to eq(11)
    expect(Kanrisuru::Util::DmiType['System Configuration Options']).to eq(12)
    expect(Kanrisuru::Util::DmiType['BIOS Language']).to eq(13)
    expect(Kanrisuru::Util::DmiType['Group Associations']).to eq(14)
    expect(Kanrisuru::Util::DmiType['System Event Log']).to eq(15)
    expect(Kanrisuru::Util::DmiType['Physical Memory Array']).to eq(16)
    expect(Kanrisuru::Util::DmiType['Memory Device']).to eq(17)
    expect(Kanrisuru::Util::DmiType['32-bit Memory Error']).to eq(18)
    expect(Kanrisuru::Util::DmiType['Memory Array Mapped Address']).to eq(19)
    expect(Kanrisuru::Util::DmiType['Memory Device Mapped Address']).to eq(20)
    expect(Kanrisuru::Util::DmiType['Built-in Pointing Device']).to eq(21)
    expect(Kanrisuru::Util::DmiType['Portable Battery']).to eq(22)
    expect(Kanrisuru::Util::DmiType['System Reset']).to eq(23)
    expect(Kanrisuru::Util::DmiType['Hardware Security']).to eq(24)
    expect(Kanrisuru::Util::DmiType['System Power Controls']).to eq(25)
    expect(Kanrisuru::Util::DmiType['Voltage Probe']).to eq(26)
    expect(Kanrisuru::Util::DmiType['Cooling Device']).to eq(27)
    expect(Kanrisuru::Util::DmiType['Temperature Probe']).to eq(28)
    expect(Kanrisuru::Util::DmiType['Electrical Current Probe']).to eq(29)
    expect(Kanrisuru::Util::DmiType['Out-of-band Remote Access']).to eq(30)
    expect(Kanrisuru::Util::DmiType['Boot Integrity Services']).to eq(31)
    expect(Kanrisuru::Util::DmiType['System Boot']).to eq(32)
    expect(Kanrisuru::Util::DmiType['64-bit Memory Error']).to eq(33)
    expect(Kanrisuru::Util::DmiType['Management Device']).to eq(34)
    expect(Kanrisuru::Util::DmiType['Management Device Component']).to eq(35)
    expect(Kanrisuru::Util::DmiType['Management Device Threshold Data']).to eq(36)
    expect(Kanrisuru::Util::DmiType['Memory Channel']).to eq(37)
    expect(Kanrisuru::Util::DmiType['IPMI Device']).to eq(38)
    expect(Kanrisuru::Util::DmiType['System Power Supply']).to eq(39)
    expect(Kanrisuru::Util::DmiType['Additional Information']).to eq(40)
    expect(Kanrisuru::Util::DmiType['Onboard Devices Extended Information']).to eq(41)
    expect(Kanrisuru::Util::DmiType['Management Controller Host Interface']).to eq(42)
    expect(Kanrisuru::Util::DmiType['TPM Device']).to eq(43)
  end

  it 'translates dmi types from integer to string' do
    expect(Kanrisuru::Util::DmiType[0]).to eq('BIOS')
    expect(Kanrisuru::Util::DmiType[1]).to eq('System')
    expect(Kanrisuru::Util::DmiType[2]).to eq('Baseboard')
    expect(Kanrisuru::Util::DmiType[3]).to eq('Chassis')
    expect(Kanrisuru::Util::DmiType[4]).to eq('Processor')
    expect(Kanrisuru::Util::DmiType[5]).to eq('Memory Controller')
    expect(Kanrisuru::Util::DmiType[6]).to eq('Memory Module')
    expect(Kanrisuru::Util::DmiType[7]).to eq('Cache')
    expect(Kanrisuru::Util::DmiType[8]).to eq('Port Connector')
    expect(Kanrisuru::Util::DmiType[9]).to eq('System Slots')
    expect(Kanrisuru::Util::DmiType[10]).to eq('On Board Devices')
    expect(Kanrisuru::Util::DmiType[11]).to eq('OEM Strings')
    expect(Kanrisuru::Util::DmiType[12]).to eq('System Configuration Options')
    expect(Kanrisuru::Util::DmiType[13]).to eq('BIOS Language')
    expect(Kanrisuru::Util::DmiType[14]).to eq('Group Associations')
    expect(Kanrisuru::Util::DmiType[15]).to eq('System Event Log')
    expect(Kanrisuru::Util::DmiType[16]).to eq('Physical Memory Array')
    expect(Kanrisuru::Util::DmiType[17]).to eq('Memory Device')
    expect(Kanrisuru::Util::DmiType[18]).to eq('32-bit Memory Error')
    expect(Kanrisuru::Util::DmiType[19]).to eq('Memory Array Mapped Address')
    expect(Kanrisuru::Util::DmiType[20]).to eq('Memory Device Mapped Address')
    expect(Kanrisuru::Util::DmiType[21]).to eq('Built-in Pointing Device')
    expect(Kanrisuru::Util::DmiType[22]).to eq('Portable Battery')
    expect(Kanrisuru::Util::DmiType[23]).to eq('System Reset')
    expect(Kanrisuru::Util::DmiType[24]).to eq('Hardware Security')
    expect(Kanrisuru::Util::DmiType[25]).to eq('System Power Controls')
    expect(Kanrisuru::Util::DmiType[26]).to eq('Voltage Probe')
    expect(Kanrisuru::Util::DmiType[27]).to eq('Cooling Device')
    expect(Kanrisuru::Util::DmiType[28]).to eq('Temperature Probe')
    expect(Kanrisuru::Util::DmiType[29]).to eq('Electrical Current Probe')
    expect(Kanrisuru::Util::DmiType[30]).to eq('Out-of-band Remote Access')
    expect(Kanrisuru::Util::DmiType[31]).to eq('Boot Integrity Services')
    expect(Kanrisuru::Util::DmiType[32]).to eq('System Boot')
    expect(Kanrisuru::Util::DmiType[33]).to eq('64-bit Memory Error')
    expect(Kanrisuru::Util::DmiType[34]).to eq('Management Device')
    expect(Kanrisuru::Util::DmiType[35]).to eq('Management Device Component')
    expect(Kanrisuru::Util::DmiType[36]).to eq('Management Device Threshold Data')
    expect(Kanrisuru::Util::DmiType[37]).to eq('Memory Channel')
    expect(Kanrisuru::Util::DmiType[38]).to eq('IPMI Device')
    expect(Kanrisuru::Util::DmiType[39]).to eq('System Power Supply')
    expect(Kanrisuru::Util::DmiType[40]).to eq('Additional Information')
    expect(Kanrisuru::Util::DmiType[41]).to eq('Onboard Devices Extended Information')
    expect(Kanrisuru::Util::DmiType[42]).to eq('Management Controller Host Interface')
    expect(Kanrisuru::Util::DmiType[43]).to eq('TPM Device')
  end

  it 'gets fs_mount options' do
    expect(Kanrisuru::Util::FsMountOpts.get_device('common')[:async]).to eq('boolean')
    expect(Kanrisuru::Util::FsMountOpts.get_device_opt(:ext4, :acl)).to eq('boolean')
  end

  it 'converts power' do
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :deca)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :kilo)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :mega)).to eq(-2)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :giga)).to eq(-3)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :tera)).to eq(-4)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :peta)).to eq(-5)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :exa)).to eq(-6)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :zetta)).to eq(-7)
    expect(Kanrisuru::Util::Bits.convert_power(:deca, :yotta)).to eq(-8)

    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :deca)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :kilo)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :mega)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :giga)).to eq(-2)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :tera)).to eq(-3)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :peta)).to eq(-4)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :exa)).to eq(-5)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :zetta)).to eq(-6)
    expect(Kanrisuru::Util::Bits.convert_power(:kilo, :yotta)).to eq(-7)

    expect(Kanrisuru::Util::Bits.convert_power(:mega, :deca)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :kilo)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :mega)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :giga)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :tera)).to eq(-2)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :peta)).to eq(-3)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :exa)).to eq(-4)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :zetta)).to eq(-5)
    expect(Kanrisuru::Util::Bits.convert_power(:mega, :yotta)).to eq(-6)

    expect(Kanrisuru::Util::Bits.convert_power(:giga, :deca)).to eq(3)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :kilo)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :mega)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :giga)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :tera)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :peta)).to eq(-2)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :exa)).to eq(-3)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :zetta)).to eq(-4)
    expect(Kanrisuru::Util::Bits.convert_power(:giga, :yotta)).to eq(-5)

    expect(Kanrisuru::Util::Bits.convert_power(:tera, :deca)).to eq(4)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :kilo)).to eq(3)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :mega)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :giga)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :tera)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :peta)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :exa)).to eq(-2)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :zetta)).to eq(-3)
    expect(Kanrisuru::Util::Bits.convert_power(:tera, :yotta)).to eq(-4)

    expect(Kanrisuru::Util::Bits.convert_power(:peta, :deca)).to eq(5)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :kilo)).to eq(4)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :mega)).to eq(3)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :giga)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :tera)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :peta)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :exa)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :zetta)).to eq(-2)
    expect(Kanrisuru::Util::Bits.convert_power(:peta, :yotta)).to eq(-3)

    expect(Kanrisuru::Util::Bits.convert_power(:exa, :deca)).to eq(6)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :kilo)).to eq(5)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :mega)).to eq(4)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :giga)).to eq(3)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :tera)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :peta)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :exa)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :zetta)).to eq(-1)
    expect(Kanrisuru::Util::Bits.convert_power(:exa, :yotta)).to eq(-2)

    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :deca)).to eq(7)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :kilo)).to eq(6)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :mega)).to eq(5)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :giga)).to eq(4)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :tera)).to eq(3)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :peta)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :exa)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :zetta)).to eq(0)
    expect(Kanrisuru::Util::Bits.convert_power(:zetta, :yotta)).to eq(-1)

    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :deca)).to eq(8)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :kilo)).to eq(7)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :mega)).to eq(6)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :giga)).to eq(5)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :tera)).to eq(4)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :peta)).to eq(3)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :exa)).to eq(2)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :zetta)).to eq(1)
    expect(Kanrisuru::Util::Bits.convert_power(:yotta, :yotta)).to eq(0)
  end
end
